[
  {
    "id": 1,
    "question": "What is Database?",
    "answer": "A <strong>database</strong> is an organized collection of data, stored and retrieved digitally from a remote or local computer system. Databases can be vast and complex, and such databases are developed using fixed design and modeling approaches. "
  },
  {
    "id": 2,
    "question": "What is DBMS?",
    "answer": "DBMS stands for Database Management System. DBMS is a system software responsible for the creation, retrieval, updation, and management of the database. It ensures that our data is consistent, organized, and is easily accessible by serving as an interface between the database and its end-users or application software. "
  },
  {
    "id": 3,
    "question": "What is RDBMS?",
    "answer": "RDBMS stands for Relational Database Management System. Most modern database management systems like MySQL, Microsoft SQL Server, Oracle, IBM DB2, and Amazon Redshift are based on RDBMS.  "
  },
  {
    "id": 4,
    "question": "What is the difference between DBMS and RDBMS?",
    "answer": "DBMS stores the information in files, but RDBMS stores them in tables."
  },
  {
    "id": 5,
    "question": "What is SQL?",
    "answer": "SQL stands for Structured Query Language. It is the standard language for relational database management systems. It is especially useful in handling organized data comprised of entities (variables) and relations between different entities of the data. "
  },
  {
    "id": 6,
    "question": "What is the difference between SQL and MySQL?",
    "answer": "SQL is a standard language for retrieving and manipulating structured databases. On the contrary, MySQL is a relational database management system, like SQL Server, Oracle or IBM DB2, that is used to manage SQL databases. "
  },
  {
    "id": 7,
    "question": "What are Tables and Fields?",
    "answer": "A table is an organized collection of data stored in the form of rows and columns. Columns can be categorized as vertical and rows as <br />horizontal. The columns in a table are called fields while the rows can be referred to as records. "
  },
  {
    "id": 8,
    "question": "What are Constraints in SQL?",
    "answer": "Constraints are used to specify the rules concerning data in the table. It can be applied for single or multiple fields in an SQL table during the creation of the table or after creating using the ALTER TABLE command. The constraints are:<br />• NOT NULL - Restricts NULL value from being inserted into a column. <br />• CHECK - Verifies that all values in a field satisfy a condition. <br />• DEFAULT - Automatically assigns a default value if no value has been specified for the field<br />• UNIQUE - Ensures unique values to be inserted into the field. <br />• INDEX - Indexes a field providing faster retrieval of records. <br />• PRIMARY KEY - Uniquely identifies each record in a table. <br />• FOREIGN KEY - Ensures referential integrity for a record in another table. "
  },
  {
    "id": 9,
    "question": "What is a Primary Key?",
    "answer": "The PRIMARY KEY constraint uniquely identifies each row in a table. It must contain UNIQUE values and has an implicit NOT NULL constraint. A table in SQL is strictly restricted to have one and only one primary key, which is comprised of single or multiple fields (columns). <br />CREATE TABLE Students (<br />   ID INT NOT NULL <br />   Name VARCHAR(255) <br />   PRIMARY KEY (ID) <br />);"
  },
  {
    "id": 10,
    "question": "What is a UNIQUE constraint? ",
    "answer": "A UNIQUE constraint ensures that all values in a column are different. This provides uniqueness for the column(s) and helps identify each <br />row uniquely. Unlike primary key, there can be multiple unique constraints defined per table. The code syntax for UNIQUE is quite similar to that of PRIMARY KEY and can be used interchangeably. <br />CREATE TABLE Students (   <br />   ID INT NOT NULL UNIQUE <br />   Name VARCHAR(255) <br />); "
  },
  {
    "id": 11,
    "question": "What is a Foreign Key? ",
    "answer": "A FOREIGN KEY comprises of single or collection of fields in a table that essentially refers to the PRIMARY KEY in another table. Foreign key constraint ensures referential integrity in the relation between two tables. The table with the foreign key constraint is labeled as the child table, and the table containing the candidate key is labeled as the referenced or parent table. <br />CREATE TABLE Students (   <br />   ID INT NOT NULL <br />   Name VARCHAR(255) <br />   LibraryID INT <br />   PRIMARY KEY (ID) <br />   FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID) <br />); "
  },
  {
    "id": 12,
    "question": "What is a Join?",
    "answer": "The SQL Join clause is used to combine records (rows) from two or more tables in a SQL database based on a related column between the two. "
  },
  {
    "id": 13,
    "question": "List its different types of Join.",
    "answer": "• (INNER) JOIN: Retrieves records that have matching values in both tables involved in the join. This is the widely used join for queries. <br />• LEFT (OUTER) JOIN: Retrieves all the records/rows from the left and the matched records/rows from the right table.<br />• RIGHT (OUTER) JOIN: Retrieves all the records/rows from the right and the matched records/rows from the left table. <br />• FULL (OUTER) JOIN: Retrieves all the records where there is a match in either the left or right table. "
  },
  {
    "id": 14,
    "question": "What is a Self-Join? ",
    "answer": "A self JOIN is a case of regular join where a table is joined to itself based on some relation between its own column(s). Self-join uses the nINNER JOIN or LEFT JOIN clause and a table alias is used to assign different names to the table within the query. "
  },
  {
    "id": 15,
    "question": "What is a Cross-Join? ",
    "answer": "The CROSS JOIN is used to generate a paired combination of each row of the first table with each row of the second table. This join type is also known as cartesian join."
  },
  {
    "id": 16,
    "question": "What is an Index?",
    "answer": "A database index is a data structure that provides a quick lookup of data in a column or columns of a table. It enhances the speed of operations accessing data from a database table at the cost of additional writes and memory to maintain the index data structure.<br />CREATE INDEX index_name   /* Create Index */ <br />ON table_name (column_1, column_2); <br />DROP INDEX index_name;   /* Drop Index */  <br />The index types include the following: <br /> • Unique and Non-Unique Index<br /> • Clustered and Non-Clustered Index "
  },
  {
    "id": 17,
    "question": "What are differences between Unique and Non-Unique Index?",
    "answer": "Unique indexes are indexes that help maintain data integrity by ensuring that no two rows of data in a table have identical key values. Once a unique index has been defined for a table, uniqueness is enforced whenever keys are added or changed within the index. <br />Non-unique indexes, on the other hand, are not used to enforce constraints on the tables with which they are associated. Instead, non-unique indexes are used solely to improve query performance by maintaining a sorted order of data values that are used frequently. "
  },
  {
    "id": 18,
    "question": "What are differences between Clustered and Non-Clustered Index?",
    "answer": "<b>Clustered indexes</b> are indexes whose order of the rows in the database corresponds to the order of the rows in the index. This is why only one clustered index can exist in a given table. Used to easily and quickly retrieve data from the database.<br /><b>A non-clustered index</b> stores a copy of the index values as well as pointers to the actual data(creates a separate entity within the table which references the original table). Unlike a clustered index, there can be multiple non-clustered indexes on a single table. Retrieving data from the database is relatively slower."
  },
  {
    "id": 19,
    "question": "What is Data Integrity?",
    "answer": "Data Integrity is the assurance of accuracy and consistency of data over its entire life-cycle and is a critical aspect of the design, implementation, and usage of any system which stores, processes, or retrieves data. It also defines integrity constraints to enforce business\nrules on the data when it is entered into an application or a database. "
  },
  {
    "id": 20,
    "question": "What is a Query?",
    "answer": "A <b>query</b> is a request for data or information from a database table or combination of tables. A database query can be either a select query or an action query (Action queries are queries that make changes to many records at once). "
  },
  {
    "id": 21,
    "question": "What is a Subquery?",
    "answer": "A <b>subquery</b> is a query within another query (a nested query or inner query). It is used to restrict or enhance the data to be queried by the main query, thus restricting or enhancing the output of the main query respectively. <br />For example, here we fetch the contact information for students who have enrolled for the maths subject: <br />SELECT name, email, mob, address <br />FROM myDb.contacts <br />WHERE roll_no IN ( <br /> SELECT roll_no <br /> FROM myDb.students <br /> WHERE subject = 'Maths'); "
  },
  {
    "id": 22,
    "question": "What are types of Subquery?",
    "answer": "There are two types of subquery - Correlated and Non-Correlated.<br /> A <b>correlated subquery</b> cannot be considered as an independent query, but it can refer to the column in a table listed in the FROM of the main query.<br />A <b>non-correlated</b> subquery can be considered as an independent query and the output of the subquery is substituted in the main query."
  },
  {
    "id": 23,
    "question": "What is the SELECT statement?",
    "answer": "SELECT operator in SQL is used to select data from a database. The data returned is stored in a result table, called the result-set.<br /><b>SELECT</b> * <b>FROM</b> myDB.students;"
  },
  {
    "id": 24,
    "question": "What are the WHERE and ORDER BY clauses used for?",
    "answer": "<b>WHERE</b> clause is used to filter records that are necessary, based on specific conditions (cannot filter aggregated records).<br /><b>ORDER BY</b> clause is used to sort the records based on some field(s) in ascending (ASC) or descending order (DESC).<br />SELECT * FROM myDB.students <br />WHERE graduation_year = 2019 <br />ORDER BY studentID DESC;"
  },
  {
    "id": 25,
    "question": "What are the GROUP BY and HAVING clauses used for?",
    "answer": "<b>GROUP BY</b> clause is used to group records with identical data.<br /><b>HAVING</b> clause in SQL is used to filter records in combination with the GROUP BY clause. <br />SELECT COUNT(studentId), country <br />FROM myDB.students <br />WHERE country != \"INDIA\" <br />GROUP BY country <br />HAVING COUNT(studentID) > 5;"
  },
  {
    "id": 26,
    "question": "What are some common clauses used with SELECT query in SQL?",
    "answer": "<b>WHERE</b><br /><b>ORDER BY</b><br /><b>GROUP BY</b><br /><b>HAVING</b>"
  },
  {
    "id": 27,
    "question": "What is UNION command?",
    "answer": "The <b>UNION</b> operator combines and returns the result-set retrieved by two or more SELECT statements (selects only distinct values by default).<br />SELECT column_name(s) FROM table1<br /><b>UNION</b><br />SELECT column_name(s) FROM table2;<br /><b>UNION ALL</b> to allow to retrieve duplicate rows <br />SELECT column_name(s) FROM table1<br /><b>UNION ALL</b><br />SELECT column_name(s) FROM table2;"
  },
  {
    "id": 28,
    "question": "What is MINUS command?",
    "answer": "<b>MINUS</b> select data from the first set that is not in the second set selected by the SELECT clause."
  }
]
