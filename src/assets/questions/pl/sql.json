[
  {
    "id": 1,
    "question": "Co to jest baza danych ?",
    "answer": "Baza danych to uporządkowany zbiór danych, przechowywany i pobierany cyfrowo ze zdalnego lub lokalnego systemu komputerowego. Bazy danych mogą być rozległe i złożone, a takie bazy danych są opracowywane przy użyciu stałych podejść projektowych i modelowania."
  },
  {
    "id": 2,
    "question": "Co to jest DBMS?",
    "answer": "DBMS oznacza Database Management System (System Zarządzania Bazą Danych). DBMS to oprogramowanie systemowe odpowiedzialne za tworzenie, pobieranie, aktualizację i<br />nzarządzanie bazą danych. Zapewnia, że nasze dane są spójne, zorganizowane i łatwo dostępne, służąc jako interfejs międzyn bazą danych a jej użytkownikami końcowymi lub oprogramowaniem aplikacji."
  },
  {
    "id": 3,
    "question": "What is RDBMS?",
    "answer": "RDBMS to Relational Database Management System (System Zarządzania Relacyjną Bazą Danych). Większość nowoczesnych systemów zarządzania bazami danych, takich jak MySQL, Microsoft SQL Server, Oracle, IBM DB2 i Amazon Redshift, opiera się na RDBMS."
  },
  {
    "id": 4,
    "question": "Czym różni się DBMS od RDBMS?",
    "answer": "DBMS - przechowuje informacje w plikach, natomiast RDBMS - przechowuje informacje w tabelach."
  },
  {
    "id": 5,
    "question": "Czym jest SQL?",
    "answer": "SQL oznacza Structured Query Language (język zapytań strukturalnych). Jest to standardowy język dla systemów zarządzania relacyjnymi bazami danych. Jest szczególnie przydatny do obsługi zorganizowanych danych składających się z encji (zmiennych) i relacji między różnymi encjami danych."
  },
  {
    "id": 6,
    "question": "Jaka jest różnica pomiędzy SQL i MySQL?",
    "answer": "SQL to standardowy język do pobierania i manipulowania ustrukturyzowanymi bazami danych. MySQL to z kolei system zarządzania relacyjnymi bazami danych, taki jak SQL Server, Oracle lub IBM DB2, który służy do zarządzania bazami danych SQL."
  },
  {
    "id": 7,
    "question": "Czym są tabele i pola?",
    "answer": "Tabela to uporządkowany zbiór danych przechowywanych w formie wierszy i kolumn. Kolumny można podzielić na pionowe, a wiersze na poziome. Kolumny w tabeli nazywane są polami, a wiersze rekordami."
  },
  {
    "id": 8,
    "question": "Czym są ograniczenia w SQL?",
    "answer": "Ograniczenia służą do określania reguł dotyczących danych w tabeli. Mogą być stosowane do pojedynczych lub wielu pól w tabeli SQL podczas tworzenia tabeli lub po utworzeniu za pomocą polecenia ALTER TABLE. Ograniczenia są następujące:<br />n• NOT NULL — Ogranicza wstawianie wartości NULL do kolumny.<br />n• CHECK — Sprawdza, czy wszystkie wartości w polu spełniają warunek.<br />n• DEFAULT — Automatycznie przypisuje wartość domyślną, jeśli dla pola nie określono żadnej wartości.<br />n• UNIQUE — Zapewnia, że w polu zostaną wstawione unikalne wartości.<br />n• INDEX — Indeksuje pole, zapewniając szybsze wyszukiwanie rekordów.<br />n• PRIMARY KEY — Unikalnie identyfikuje każdy rekord w tabeli.<br />n• FOREIGN KEY — Zapewnia integralność referencyjną rekordu w innej tabeli."
  },
  {
    "id": 9,
    "question": "Czym jest Primary Key?",
    "answer": "PRIMARY KEY (klucz główny) - jednoznacznie identyfikuje każdy wiersz w tabeli. Musi zawierać wartości UNIQUE i ma niejawne ograniczenie NOT NULL. Tabela w SQL jest ściśle ograniczona do posiadania jednego i tylko jednego klucza głownego, który składa się z pojedynczych lub wielu pól (kolumn). <br />nCREATE TABLE Students (<br />n   ID INT NOT NULL <br />n   Name VARCHAR(255) <br />n   PRIMARY KEY (ID) <br />n); "
  },
  {
    "id": 10,
    "question": "Czym jest UNIQUE?",
    "answer": "UNIQUE zapewnia, że wszystkie wartości w kolumnie są różne. Zapewnia to unikalność kolumn i pomaga w unikatowej identyfikacji każdego wiersza. W przeciwieństwie do klucza podstawowego, dla każdej tabeli można zdefiniować wiele ograniczeń unikalności. Składnia kodu dla UNIQUE jest bardzo podobna do składni PRIMARY KEY i może być stosowana zamiennie. <br />nCREATE TABLE Students (   <br />n   ID INT NOT NULL UNIQUE <br />n   Name VARCHAR(255) <br />n); "
  },
  {
    "id": 11,
    "question": "Czym jest Foreign Key?",
    "answer": "Foreign Key składa się z pojedynczego pola lub zbioru pól w tabeli, które zasadniczo odnoszą się do Primary Key w innej tabeli. Ograniczenie klucza obcego zapewnia integralność referencyjną w relacji między dwiema tabelami. Tabela z ograniczeniem klucza obcego jest oznaczona jako tabela podrzędna, a tabela zawierająca klucz kandydujący jest oznaczona jako tabela odwoławcza lub nadrzędna. <br />nCREATE TABLE Students (   <br />n   ID INT NOT NULL <br />n   Name VARCHAR(255) <br />n   LibraryID INT <br />n   PRIMARY KEY (ID) <br />n   FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID) <br />n);  "
  },
  {
    "id": 12,
    "question": "Czym jest Join?",
    "answer": "Join służy do łączenia rekordów (wierszy) z dwóch lub więcej tabel w bazie danych SQL na podstawie powiązanej kolumny między nimi."
  },
  {
    "id": 13,
    "question": "Wymień różne typy Join.",
    "answer": "• (INNER) JOIN: Pobiera rekordy, które mają pasujące wartości w obu tabelach biorących udział w połączeniu. Jest to powszechnie używane połączenie w zapytaniach. <br />n• LEFT (OUTER) JOIN: Pobiera wszystkie rekordy/wiersze z lewej tabeli i dopasowane rekordy/wiersze z prawej tabeli.<br />n• RIGHT (OUTER) JOIN: Pobiera wszystkie rekordy/wiersze z prawej tabeli i dopasowane rekordy/wiersze z lewej tabeli.<br />n• FULL (OUTER) JOIN: Pobiera wszystkie rekordy, dla których znaleziono dopasowanie w tabeli lewej lub prawej."
  },
  {
    "id": 14,
    "question": "Czym jest Self-Join?",
    "answer": "Self JOIN to przypadek zwykłego łączenia, w którym tabela jest łączona sama ze sobą na podstawie pewnej relacji między jej własnymi kolumnami. Self-join używa INNER JOIN lub LEFT JOIN, a alias tabeli jest używany do przypisywania różnych nazw tabeli w zapytaniu."
  },
  {
    "id": 15,
    "question": "Czym jest Cross-Join?",
    "answer": "CROSS JOIN służy do generowania sparowanej kombinacji każdego wiersza pierwszej tabeli z każdym wierszem drugiej tabeli. Ten typ połączenia jest również znany jako połączenie kartezjańskie."
  },
  {
    "id": 16,
    "question": "Czym jest Index?",
    "answer": "Indeks bazy danych to struktura danych, która umożliwia szybkie wyszukiwanie danych w kolumnie lub kolumnach tabeli. Zwiększa szybkość operacji uzyskiwania dostępu do danych z tabeli bazy danych, kosztem dodatkowych zapisów i pamięci w celu, zachowania struktury danych indeksu.<br />nCREATE INDEX index_name   /* Create Index */ <br />nON table_name (column_1, column_2); <br />nDROP INDEX index_name;   /* Drop Index */  <br />nW index wyróżniamy następujące typy: <br />n • Unique and Non-Unique Index<br />n • Clustered and Non-Clustered Index"
  },
  {
    "id": 17,
    "question": "Jakie są różnice między unikalnym(unique) i nieunikalnym(non-unique) indeksem?",
    "answer": "Unique Indexes - Indeksy unikalne to indeksy, które pomagają zachować integralność danych zapewniając, że żadne dwa wiersze danych w tabeli nie mają identycznych wartości kluczy. Po zdefiniowaniu indeksu unikalnego dla tabeli, unikalność jest wymuszana za każdym razem, gdy klucze są dodawane lub zmieniane w indeksie.<br />n Non-unique indexes - indeksy nieunikalne są używane wyłącznie w celu poprawy wydajności zapytania poprzez utrzymanie posortowanej kolejności według często używanych wartości danych."
  },
  {
    "id": 18,
    "question": "Jakie są różnice między Clustered i Non-Clustered Index?",
    "answer": "<b>Indeksy klastrowane</b> (clustered indexes) - to indeksy których kolejnosć wierszy w bazie danych odpowiada kolejności wierszy w indeksie. W danej tabeli może istnieć tylko jeden indeks klastrowany. Używany do łatwego i szybkiego pobierania danych z bazy danych.<br /><b>Indeks nieklastrowany</b> przechowuje kopię wartości indeksu oraz wskaźniki do rzeczywistych danych(tworzy oddzielną jednostkę w tabeli, która odwołuje się do orginalnej tabeli). W przeciwieństwie do indeksu klastrowanego, może być wiele indeksów nieklastrowanych w jednej tabeli. Pobieranie danych z bazy danych jest stosunkowo wolniejsze."
  },
  {
    "id": 19,
    "question": "Czym jest integralność danych?",
    "answer": "<b>Integralność danych</b> to zapewnienie dokładności i spójności danych w całym cyklu ich życia. Krytyczny aspekt projektowania, implementacji i użytkowania dowolnego systemu, który przechowuje, przetwarza lub pobiera dane. Definiuje ograniczenia integralności w celu egzekwowania reguł biznesowych dotyczących danych, gdy są one wprowadzane do aplikacji lub bazy danych."
  },
  {
    "id": 20,
    "question": "Czym jest zapytanie(query)?",
    "answer": "<b>Zapytanie</b>(query) - żądanie danych lub informacji z tabeli bazy danych lub kombinacji tabel. Zapytanie bazy danych może być zapytaniem SELECT lub zapytaniem akcji (zaptania akcji wprowadzają zmiany w wielu rekorach jednocześnie). "
  },
  {
    "id": 21,
    "question": "Czym jest podzapytanie(subquery)?",
    "answer": "<b>Podzapytanie</b>(subquery) - zapytanie w innym zapytaniu(zagnieżdzone zapytania lub wewnętrzne zapytanie). Służy do ograniczania lub rozszerzania danych, które mają być odpytywane przez zapytanie główne, odpowiednio ograniczając lub rozszeżając w ten sposób wynik zapytania głównego.<br />W tym przykłądzie pobieramy dane kontaktowe uczniów, którzy zapisali się na przedmiot matematyka: <br />SELECT name, email, mob, address <br />FROM myDb.contacts <br />WHERE roll_no IN ( <br /> SELECT roll_no <br /> FROM myDb.students <br /> WHERE subject = 'Maths');"
  },
  {
    "id": 22,
    "question": "Jakie są rodzaje podzapytań(subquery)?",
    "answer": "Są 2 typy podzapytań - skorelowane (correlated) i nieskorelowane (non-correlated).<br /><b>Podzapytanie skorelowanie</b> nie jest to zapytanie niezależne, ale może ono odwoływać się do kolumny w tabeli wymienionej w polu FROM głównego zapytania.<br /><b>Podzapytanie nieskorelowane</b> można traktować jako niezależne zapytanie, a wynik podzapytania jest podstawiany do zapytania głównego."
  },
  {
    "id": 23,
    "question": "Czym jest polecenie SELECT?",
    "answer": "Operator SELECT w SQL służy do wybierania danych z bazy danych. Zwrócone dane są przechowywane w tabeli wyników, zwanej zestawem wyników.<br /><b>SELECT</b> * <b>FROM</b> myDB.students;"
  },
  {
    "id": 24,
    "question": "Do czego służą klauzuly WHERE i ORDER BY?",
    "answer": "Klauzula <b>WHERE</b> służy do filtrowania rekordów na podstawie określonych warunków (nie może filtrować zebranych elementów).<br />Klauzula <b>ORDER BY</b> służy do sortowania rekordów na podstawie pewnych pól w kolejności rosnącej (ASC) lub malejącej (DESC).<br />SELECT * FROM myDB.students <br />WHERE graduation_year = 2019 <br />ORDER BY studentID DESC;"
  },
  {
    "id": 25,
    "question": "Do czego służą klauzuly GROUP BY i HAVING?",
    "answer": "Klauzula <b>GROUP BY</b> służy do grupowania rekordów zawierających identyczne dane. <br /><b>HAVING</b> jest używana do filtrowania rekordów w połączeniu z <b>GROUP BY</b>.<br />SELECT COUNT(studentId), country <br />FROM myDB.students <br />WHERE country != \"INDIA\" <br />GROUP BY country <br />HAVING COUNT(studentID) > 5;"
  },
  {
    "id": 26,
    "question": "Jakie są najczęstsze klauzule używane w zapytaniu SELECT w SQL?",
    "answer": "<b>WHERE</b><br /><b>ORDER BY</b><br /><b>GROUP BY</b><br /><b>HAVING</b>"
  },
  {
    "id": 27,
    "question": "Czym jest polecenie UNION?",
    "answer": "Operator <b>UNION</b> łączy i zwraca zestaw wyników pobranych za pomocą dwóch lub więcej instrukcji SELECT (domyślnie wybiera tylko różne wartosci).<br />SELECT column_name(s) FROM table1<br /><b>UNION</b><br />SELECT column_name(s) FROM table2;<br /><b>UNION ALL</b> pozwala na pobranie zduplikowanych wierszy <br />SELECT column_name(s) FROM table1<br /><b>UNION ALL</b><br />SELECT column_name(s) FROM table2;"
  },
  {
    "id": 28,
    "question": "Czym jest polecenie MINUS?",
    "answer": "<b>MINUS</b> wybiera z pierwszego zestawu dane, których nie ma w drugim zestawie wybieranym klauzulą SELECT.<br />SELECT name FROM table1<br /><b>MINUS</b><br />SELECT name FROM table2;"
  },
  {
    "id": 29,
    "question": "Czym jest polecenie INTERSECT?",
    "answer": "<b>INTERSECT</b> łączy zestaw wyników pobrany przez dwa polecenia SELECT, w których rekordy z jednego pasują do drugiego, a następnie zwraca część wspólną zestawów wyników. <br />SELECT name FROM table1<br /><b>INTERSECT</b><br />SELECT name FROM table2;"
  },
  {
    "id": 30,
    "question": "Jakie warunki muszą zostać spełnione jeżli chcemy wykonać któreś z poleceń UNION, MINUS lub INTERSECT?",
    "answer": "Przed wykonaniem któregokolwiek z powyższych poleceń muszą zostać spełnione pewne warunki:<br />• Każde polecenie SELECT w klauzuli musi mieć taką samą liczbę kolumn<br />• Kolumny muszą mieć również podobne typy danych<br />• Kolumny w każdym poleceniu SELECT muszą mieć koniecznie taką samą kolejność"
  },
  {
    "id": 31,
    "question": "Co to jest Kursor?",
    "answer": "<b>KURSOR</b> jest strukturą umożliwiającą przetwarzanie wielu wierszy zwracanych w określonej kolejności przez zapytanie na zasadzie „wiersz po wierszu”."
  },
  {
    "id": 32,
    "question": "Jak użyć Kursor?",
    "answer": "1. <b>Zadeklaruj</b> kursor po deklaracji dowolnej zmiennej. Deklaracja kursora musi być zawsze powiązana z instrukcją <b>SELECT</b>. <br />2. Otwórz kursor, aby zainicjować zestaw wyników. Instrukcja <b>OPEN</b> musi zostać wywołana przed pobraniem wierszy z zestawu wyników.<br />3. Dodaj <b>FETCH</b>, aby pobierać i przechodzić do następnych wierszy w zestawie wyników. <br />4. Wywołaj instrukcję <b>CLOSE</b>, aby dezaktywować kursor. <br />5. Na koniec użyj instrukcji <b>DEALLOCATE</b>, aby usunąć definicję kursora i zwolnić powiązane zasoby. <br /><b>DECLARE</b> @name VARCHAR(50) /* Declare All Required Variables */ <br /><b>DECLARE</b> db_cursor <b>CURSOR FOR</b> /* Declare Cursor Name*/ <br /><b>SELECT</b> name <b>FROM</b> myDB.students <br /><b>WHERE</b> parent_name <b>IN</b> ('name1', 'name2') <br /><b>OPEN</b> db_cursor /* Open cursor and Fetch data into @name */ <br /><b>FETCH</b> next <br /><b>FROM</b> db_cursor <br /><b>INTO</b> @name <br /><b>CLOSE</b> db_cursor /* Close the cursor and deallocate the resources */ <br /><b>DEALLOCATE</b> db_cursor  "
  },
  {
    "id": 33,
    "question": "Co to jest Entity?",
    "answer": "<b>Entity</b> - (jednostka) może być obiektem ze świata rzeczywistego, materialnym lub niematerialnym, który można łatwo zidentyfikować. Na przykład w bazie danych uczelni studenci, profesorowie, pracownicy, wydziały i projekty mogą być określani jako jednostki. Każda jednostka ma pewne powiązane właściwości, które nadają jej tożsamość."
  },
  {
    "id": 34,
    "question": "Co to są relacje?",
    "answer": "<b>Relacje</b> - Relacje lub powiązania między jednostkami, które mają coś wspólnego ze sobą. Na przykład - tabela pracowników w bazie danych firmy może być skojarzona z tabelą wynagrodzeń w tej samej bazie danych."
  },
  {
    "id": 35,
    "question": "Wymień różne typy relacji w SQL.",
    "answer": "<b>- Jeden-do-jednego</b> (One-to-One)<br /><b>- Jeden-do-wielu & Wiele-do-jednego</b> (One-to-Many & Many-to-One)<br /><b>- Wiele-do-wielu</b> (Many-to-Many)<br /><b>- Relacje odwołujące się do siebie</b> (Self-Referencing Relationships)<br />"
  },
  {
    "id": 36,
    "question": "Czym jest relacja Jeden-do-jednego (One-to-One)?",
    "answer": "<b>Jeden do jednego</b> - jest to relacja między dwiema tabelami, w której każdy rekord w jednej tabeli jest powiązany z <b>maksymalnie jednym</b> rekordem w drugiej tabeli."
  },
  {
    "id": 37,
    "question": "Czym jest relacja Jeden-do-wielu & Wiele-do-jednego (One-to-Many & Many-to-One)?",
    "answer": "<b>Jeden-do-wielu & Wiele-do-jednego</b> (One-to-Many & Many-to-One) – jest to relacja, w której rekord w tabeli jest powiązany z wieloma rekordami w innej tabeli."
  },
  {
    "id": 38,
    "question": "Czym jest relacja Wiele-do-wielu (Many-to-Many)?",
    "answer": "<b>Wiele-do-wielu</b> (Many-to-Many) – używane w przypadkach, gdy do zdefiniowania relacji wymagane są liczne wystąpienia po obu stronach ~ wiele rekordów w jednej tabeli jest powiązanych z wieloma rekordami w drugiej tabeli."
  },
  {
    "id": 39,
    "question": "Czym jest relacja  odwołuja się do siebie (Self-Referencing Relationships)?",
    "answer": "<b>Relacje odwołujące się do siebie</b> (Self-Referencing Relationships) – używane, gdy tabela musi zdefiniować relację z samą sobą ~ rekord w tabeli odwołuje się do innego rekordu w tej samej tabeli (np. encja, taka jak pracownik, musi być powiązana z inną jednostką tego samego typu – innym pracownikiem, który pełni funkcję jego przełożonego)."
  },
  {
    "id": 40,
    "question": "Czym jest Alias?",
    "answer": "Jest to tymczasowa nazwa przypisana do tabeli lub kolumny tabeli na potrzeby konkretnego zapytania SQL. Ponadto alias może być stosowany jako technika maskowania w celu zabezpieczenia prawdziwych nazw pól bazy danych. Alias tabeli jest również nazywany nazwą korelacji. <br /><b>SELECT</b> A.emp_name <b>AS</b> \"Employee\"  /* Alias using AS keyword */ <br />B.emp_name <b>AS</b> \"Supervisor\" <b>FROM</b> employee A, employee B   /* Alias without AS keyword */ <br /><b>WHERE</b> A.emp_sup = B.emp_id; "
  },
  {
    "id": 41,
    "question": "Czym jest widok(view)?",
    "answer": "Widok w SQL to wirtualna tabela oparta na zestawie wyników instrukcji SQL. Widok zawiera wiersze i kolumny, tak jak prawdziwa tabela. Pola w widoku to pola z jednej lub więcej rzeczywistych tabel w bazie danych."
  },
  {
    "id": 42,
    "question": "Czym jest Normalizacja?",
    "answer": "Normalizacja to sposób wydajnej organizacji ustrukturyzowanych danych w bazie danych. Obejmuje ona tworzenie tabel, ustanawianie relacji między nimi i definiowanie reguł dla tych relacji. <br />Podstawowym założeniem Normalizacji jest usunięcie nadmiarowości. Dokonuje się tego dzięki podziałowi tabeli na małe partycje, które następnie łączy się za pomocą różnych relacji tak, aby uniknać szans na pojawienie się redundancji."
  },
  {
    "id": 43,
    "question": "Czym jest Denormalizacja?",
    "answer": "<b>Denormalizacja</b> to odwrotny proces normalizacji, w którym znormalizowany schemat jest konwertowany na schemat, który ma nadmiarowe informacje. Denormalizacja dodaje wymagany nadmiarowy termin do tabeli dzięki czemu możemy uniknąć stosowania złożonych sprzężeń i wielu innych złożonych operacji."
  },
  {
    "id": 44,
    "question": "Jakie są różne formy normalizacji w relacyjnych bazach danych?",
    "answer": "Najczęściej spotykane to: <br />- Pierwsza postać normalna (1NF)<br />- Druga postać normalna (2NF)<br />- Trzecia postać normalna (3NF) <br />Oprócz tego,można również trafić na postaci normalne takie jak: <br />- Postać normalna Boyce’a Codda<br />- Czwarta postać normalna (4NF)<br />- Piąta postać normalna (5NF)"
  },
  {
    "id": 45,
    "question": "Co to znaczy <b>pierwsza postać normalna</b> (1NF)?",
    "answer": "Każdy atrybut w tej relacji jest jednowartościowy ~ każda komórka musi przechowywać jedną wartość. Jeśli relacja zawiera atrybut złożony lub wielowartościowy, narusza to regułę 1FN. <table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Product_name| </th>\n\t\t\t<th> Price</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>Keyboard</td>\n\t\t\t<td>500</td>\n\t\t</tr>\n\t</tbody>\n</table>"
  },
  {
    "id": 46,
    "question": "Co to znaczy <b>druga postać normalna</b> (2NF)?",
    "answer": "Relacja jest w drugiej postaci normalnej, jeśli spełnia warunki pierwszej postaci normalnej oraz każda kolumna w tabeli musi być zależna od klucza głownego."
  },
  {
    "id": 47,
    "question": "Co to znaczy <b>trzecia postać normalna</b> (3NF)?",
    "answer": "3 Postać Normalna (3NF) to trzeci poziom normalizacji danych, który spełnia 2NF oraz zakłada, że niekluczowa kolumna nie może zależeć od innej niekluczowej kolumny (niekluczowa kolumna musi zależeć tylko od klucza głównego, a nie od innych niekluczowych kolumn)."
  },
  {
    "id": 48,
    "question": "Czym jest polecenie <b>TRUNCATE</b>?",
    "answer": "Polecenie <b>TRUNCATE</b> służy do usuwania wszystkich wierszy z tabeli i zwalniania zajmowane przez tabele miejsca w przestrzeni tabel. <br /><br /><b>TRUNCATE TABLE</b> Candidates;"
  },
  {
    "id": 49,
    "question": "Czym jest polecenie <b>DELETE</b>?",
    "answer": "Polecenie <b>DELETE</b> służy do usuwania  wierszy z tabeli (możemy wybrać wiersze do usunięcia). <br /><br /><b>DELETE FROM</b> Candidates <br/><b>WHERE</b>CandidateId > 1000; "
  },
  {
    "id": 50,
    "question": "Czym jest polecenie <b>DROP</b>?",
    "answer": "Polecenie <b>DROP</b> służy do usuwania obiektu z bazy danych. Jeśli usuniesz tabelę, wszystkie wiersze w tabeli zostaną usunięte, a struktura tabeli zostanie usunięta z bazy danych.  <br /><br /><b>DROP TABLE</b> Candidates;"
  },
  {
    "id": 51,
    "question": "Jaka jest różnica pomiędzy poleceniami <b>DROP</b> i <b>TRUNCATE</b>?",
    "answer": "Wykorzystanie <b>DROP</b> spowoduje, że wszystkie elementy powiązane z tabelami zostaną usunięte. Obejmuje to - relacje zdefiniowane w tabeli z innymi tabelami, kontrole integralności i ograniczenia, uprawnienia dostępu i inne uprawnienia, które ma tabela. Aby utworzyć i ponownie użyć tabeli w jej oryginalnej formie, wszystkie te relacje, kontrole, ograniczenia, uprawnienia i relacje muszą zostać zdefiniowane na nowo. <br />Przy wykorzystaniu <b>TRUNCATE</b>, żaden z powyższych problemów nie występuje( usuwa dane pozostawiając tabele), a tabela zachowuje swoją oryginalną strukturę."
  },
  {
    "id": 52,
    "question": "Jaka jest różnica pomiędzy poleceniami <b>DELETE</b> i <b>TRUNCATE</b>?",
    "answer": "Wykorzystanie <b>DROP</b> spowoduje, że wszystkie elementy powiązane z tabelami zostaną usunięte. Obejmuje to - relacje zdefiniowane w tabeli z innymi tabelami, kontrole integralności i ograniczenia, uprawnienia dostępu i inne uprawnienia, które ma tabela. Aby utworzyć i ponownie użyć tabeli w jej oryginalnej formie, wszystkie te relacje, kontrole, ograniczenia, uprawnienia i relacje muszą zostać zdefiniowane na nowo. <br />Przy wykorzystaniu <b>TRUNCATE</b>, żaden z powyższych problemów nie występuje( usuwa dane pozostawiając tabele), a tabela zachowuje swoją oryginalną strukturę."
  }
]
